@{
    ViewBag.Title = "Home Page";
}

@section head
{
    <script src="~/Scripts/jquery.signalR-2.2.0.js"></script>
    <script src="/signalr/hubs"></script>
    <script type="text/javascript" src="~/Scripts/phaser/phaser.min.js"></script>
    <style type="text/css">
        body, .container, .body-content, .row {
            margin: 0;
            padding: 0;
        }

        #login {
            margin: auto;
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            width: 300px;
            height: 100px;
        }

        div.centre {
            width: 720px;
            display: block;
            margin-left: auto;
            margin-right: auto;
            height: 624px;
            position: absolute;
            top: 200px;
            bottom: 0;
            left: 0;
            right: 0;
            margin: auto;
        }

        #joinDiv {
            text-align: center;
            max-width: 280px;
            margin-top: 10px;
        }

        div.game {
            margin: 0 auto;
        }
    </style>

    <script src="~/Scripts/game.js"></script>

    <script type="text/javascript">
        var mobileDebug = false;
        var portraitDebug = true;
        var gameHub;
        var connected = false;
        var isPlayer1 = false;
        var cratePositions;
        $(function () {

            window.addEventListener("orientationchange", function () {

                if (!game) return;

                var myheight = $(window).innerHeight();
                var mywidth = $(window).innerWidth();

                if (window.orientation == 90 || window.orientation == -90) {
                    game.scale.setGameSize(1440, 624);
                } else {
                    game.scale.setGameSize(720, 1248);
                }

                if (clickable) {
                    if (window.orientation == 90 || window.orientation == -90) {
                        clickable.x = 720;
                        clickable.y = 0;
                    } else {
                        clickable.x = 0;
                        clickable.y = 624;
                    }
                }

                console.log("ORIENTATION is " + window.orientation);

            }, false);

            gameHub = $.connection.gameHub;

            $.connection.hub.start().done(function () {
                connected = true;
            });

            function mobileCheck() {
                var check = false;
                (function (a, b) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true })(navigator.userAgent || navigator.vendor || window.opera);
                return check;
            }

            $('#join').click(function () {
                var un = $('#usernameTb').val();
                gameHub.server.join(un);
            });

            var userId;
            gameHub.client.playerJoined = function (user) {
                userId = user.Id;
                $("#usernameTb").attr("disabled", "disabled");
                $("#join").attr("disabled", "disabled");

                //                $("#phaser").removeClass("hidden");
                //                var url = '@Url.Action("1v1", "Home")';
                //                window.location.href = url
            };

            gameHub.client.waitingList = function () {
                $("#alert").html("Waiting for an opponent to connect...");
            };

            gameHub.client.buildBoard = function (_cratePositions, _isPlayer1) {

                if (window.game) return;

                $("#login").toggle();

                var myheight = $(window).innerHeight();
                var mywidth = $(window).innerWidth();

                $(".game").width(mywidth);
                $(".game").height(myheight);
                $(window).resize(function () {
                    var myheight = $(window).innerHeight();
                    var mywidth = $(window).innerWidth();

                    $(".game").width(mywidth);
                    $(".game").height(myheight);

                    //                    if (game) {
                    //                        game.width = mywidth;
                    //                        game.height = myheight;
                    //                        //game.stage.bounds.width = mywidth;
                    //                        //game.stage.bounds.height = myheight;
                    //
                    //                        if (game.renderType === Phaser.WEBGL) {
                    //                            game.renderer.resize(mywidth, myheight);
                    //                        }
                    //                    }
                    //if (game) game.scale.setGameSize(mywidth, myheight);
                });
                $("body").css("overflow", "hidden");

                console.log("board built");
                cratePositions = _cratePositions;
                isPlayer1 = _isPlayer1;

                if (mobileCheck() && window.orientation == 0 || (mobileDebug && portraitDebug)) {
                    window.game = new Phaser.Game(720, 1248, Phaser.AUTO, 'phaser', { preload: preload, create: create, update: update, render: render });
                } else if (mobileCheck() && (window.orientation == 90 || window.orientation == -90) || (mobileDebug && !portraitDebug)) {
                    window.game = new Phaser.Game(1440, 624, Phaser.AUTO, 'phaser', { preload: preload, create: create, update: update, render: render });
                } else {
                    window.game = new Phaser.Game(720, 624, Phaser.AUTO, 'phaser', { preload: preload, create: create, update: update, render: render });
                }
                // put phaser game here
            }

            var playerLastX = -1;
            var playerLastY = -1;
            var timeLast = -1;
            var tween;
            gameHub.client.updatePlayerPosition = function (position) {
                if (!window.game) gameHub.server.requestBoardBuild();
                if (!game || !game.time) return;

                var elapsed = game.time.totalElapsedSeconds() - timeLast;
                if (timeLast != -1) console.log(elapsed);
                if (elapsed == 0) {
                    var i = 0;
                }
                //                console.log(game.time.physicsElapsedMS);
                timeLast = game.time.totalElapsedSeconds();

                if (isPlayer1) {

                    if (tween) tween.stop();
                    tween = game.add.tween(player2);
                    tween.to({ x: position.x, y: position.y }, 4 * 1000 / 60); //4 * 1000 / 60);
                    tween.start();

                    //player2.x = position.x;
                    //player2.y = position.y;
                } else {
                    if (tween) tween.stop();
                    tween = game.add.tween(player1);
                    tween.to({ x: position.x, y: position.y }, 4 * 1000 / 60); //66.66);
                    tween.start();

                    //                    player1.x = position.x;
                    //                    player1.y = position.y;
                }
            }

            gameHub.client.enemyDied = function () {
                if (isPlayer1) player2.isDead = true;
                else player1.isDead = true;

                if (!gameEnded) endGame();
            }

            gameHub.client.putDownBomb = function (position, flame) {
                if (bombs.filter(function (sprite) {
                    return sprite.position.x == position.x && sprite.position.y == position.y;
                }).length == 0) {
                    var bomb = game.add.sprite(position.x, position.y, 'bomb_party_v4_bank_32s');
                    //var bomb = bombsGroup.create(posX, posY, 'bomb_party_v4_bank_32s');
                    //game.physics.p2.enable(bomb);
                    bomb.frame = 77;
                    bomb.animations.add('start', [77, 78]);
                    bomb.animations.add('burning', [79, 80]);
                    bomb.animations.play('start', 4, true);
                    bomb.anchor.setTo(.5, .5);
                    player1.bringToTop();
                    player2.bringToTop();
                    bomb.phyEnabledPlayer1 = false;
                    bomb.phyEnabledPlayer1 = false;
                    bomb.owner = isPlayer1 ? player2 : player1;
                    bomb.flame = flame;
                    bomb.bringToTop();

                    game.physics.p2.enable(bomb);
                    bomb.body.kinematic = true;
                    bomb.body.setCollisionGroup(bombCollisionGroup);

                    game.time.events.add(Phaser.Timer.SECOND * 1, changeBombFrame1, this, bomb);
                    bombs.push(bomb);
                } else {
                    console.log("bomb exists");
                }
            }

            gameHub.client.createPowerup = function (position, powerupChance) {
                var randomInt = powerupChance;
                if (randomInt == 0) {
                    var bombPowerup = game.add.sprite(position.X, position.Y, 'bombPowerup');
                    game.physics.p2.enable(bombPowerup);
                    bombPowerup.body.data.shapes[0].sensor = true;
                    bombPowerup.anchor.setTo(.5, .5);
                    bombPowerup.name = "bomb powerup";
                    bombPowerup.pickedUp = false;
                    bombPowerup.body.setRectangle(30, 30, 0.5, 0.5);
                    powerups.push(bombPowerup);
                    //bombPowerup.body.debug = true;
                    bombPowerup.body.setCollisionGroup(powerupsCollisionGroup);
                    bombPowerup.body.collides([p1CollisionGroup, p2CollisionGroup]);
                    bombPowerup.body.onBeginContact.add(powerupOnBeginContact, bombPowerup);
                } else if (randomInt == 1) {
                    var flamePowerup = game.add.sprite(position.X, position.Y, 'flamePowerup');
                    game.physics.p2.enable(flamePowerup);
                    flamePowerup.body.data.shapes[0].sensor = true;
                    flamePowerup.anchor.setTo(.5, .5);
                    flamePowerup.name = "flame powerup";
                    flamePowerup.pickedUp = false;
                    flamePowerup.body.setRectangle(30, 30, 0.5, 0.5);
                    //flamePowerup.body.debug = true;
                    flamePowerup.body.setCollisionGroup(powerupsCollisionGroup);
                    flamePowerup.body.collides([p1CollisionGroup, p2CollisionGroup]);
                    flamePowerup.body.onBeginContact.add(powerupOnBeginContact, flamePowerup);
                    powerups.push(flamePowerup);
                }
            }

            gameHub.client.destroyPowerup = function (posX, posY) {
                powerups.forEach(function (powerup) {
                    if (powerup.x == posX && powerup.y == posY) {
                        var powerupToRemoveIndex = powerups.indexOf(this);
                        if (powerupToRemoveIndex > -1) powerups.splice(powerupToRemoveIndex, 1);
                        powerup.destroy();
                    }
                });
            }

            gameHub.client.turnPlayer = function (direction) {
                var player;

                if (isPlayer1) {
                    player = player2;

                    p2wasDown = false;
                    p2wasUp = false;
                    p2wasLeft = false;
                    p2wasRight = false;

                    switch (direction) {
                        case "up":
                            player.animations.play('up', 4, true);
                            p2wasDown = false;
                            p2wasLeft = false;
                            p2wasRight = false;
                            p2wasUp = true;
                            break;
                        case "down":
                            player.animations.play('down', 4, true);
                            p2wasUp = false;
                            p2wasLeft = false;
                            p2wasRight = false;
                            p2wasDown = true;
                            break;
                        case "left":
                            player.animations.play('left', 4, true);
                            if (player.scale.x > 0) player.scale.x *= -1;
                            p2wasRight = false;
                            p2wasUp = false;
                            p2wasDown = false;
                            p2wasLeft = true;
                            break;
                        case "right":
                            player.animations.play('right', 4, true);
                            if (player.scale.x < 0) player.scale.x *= -1;
                            p2wasLeft = false;
                            p2wasUp = false;
                            p2wasDown = false;
                            p2wasRight = true;
                            break;
                    }
                } else {
                    player = player1;

                    p1wasDown = false;
                    p1wasUp = false;
                    p1wasLeft = false;
                    p1wasRight = false;

                    switch (direction) {
                        case "up":
                            player.animations.play('up', 4, true);
                            p1wasDown = false;
                            p1wasLeft = false;
                            p1wasRight = false;
                            p1wasUp = true;
                            break;
                        case "down":
                            player.animations.play('down', 4, true);
                            p1wasUp = false;
                            p1wasLeft = false;
                            p1wasRight = false;
                            p1wasDown = true;
                            break;
                        case "left":
                            player.animations.play('left', 4, true);
                            if (player.scale.x > 0) player.scale.x *= -1;
                            p1wasRight = false;
                            p1wasUp = false;
                            p1wasDown = false;
                            p1wasLeft = true;
                            break;
                        case "right":
                            player.animations.play('right', 4, true);
                            if (player.scale.x < 0) {
                                player.scale.x *= -1;
                            }
                            p1wasLeft = false;
                            p1wasUp = false;
                            p1wasDown = false;
                            p1wasRight = true;
                            break;
                    }
                }

            }

            gameHub.client.enemyStoppedMoving = function () {
                if (isPlayer1) {
                    player2.animations.stop();
                    if (p2wasDown) player2.frame = 17 + 15;
                    if (p2wasUp) player2.frame = 16 + 15;
                    if (p2wasLeft) {
                        player2.frame = 21 + 15;
                    }
                    if (p2wasRight) player2.frame = 21 + 15;
                } else {
                    player1.animations.stop();
                    if (p1wasDown) player1.frame = 17;
                    if (p1wasUp) player1.frame = 16;
                    if (p1wasLeft) {
                        player1.frame = 21;
                    }
                    if (p1wasRight) player1.frame = 21;
                }
            }

            gameHub.client.enemyDisconnected = function () {
                var i = 5;
            }
        });
    </script>

}

<div class="modal fade" id="myModalWon" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Modal title</h4>
            </div>
            <div class="modal-body">
                YOU WON!
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="myModalLost" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Modal title</h4>
            </div>
            <div class="modal-body">
                YOU LOST!
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="myModalDraw" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Modal title</h4>
            </div>
            <div class="modal-body">
                YOU DRAW!
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="container" id="login">
    <div class="row">
        <input type="text" id="usernameTb" class="form-control" />
        <div id="joinDiv">
            <input type="button" id="join" value="join" class="btn btn-primary" />
        </div>
        <div id="alert"></div>
    </div>
</div>

@*<div class="centre hidden" id="phaser"></div>*@
<div class="game" id="phaser"></div>